# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2018-09-12 18:00
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Locality',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Населенный пункт')),
            ],
        ),
        migrations.CreateModel(
            name='Municipality',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Муниципальное образование')),
            ],
        ),
        migrations.CreateModel(
            name='ObjectInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_id', models.CharField(max_length=200, verbose_name='ID opendata.mkrf.ru')),
                ('nativeName', models.CharField(max_length=200, verbose_name='Наименование')),
                ('fullAddress', models.TextField(verbose_name='Полный адрес')),
                ('OKN_in_ensemble', models.BooleanField(verbose_name='ОКН входит в ансамбль (да/нет)')),
                ('information_sign', models.CharField(choices=[('Yes', 'Да'), ('No', 'Нет'), ('In_work', 'На подготовке')], max_length=5, verbose_name='Наличие уcтановленной информационной надписи установленного образца')),
                ('information_sign_photo', models.CharField(max_length=200, verbose_name='Фотография информационной надписи')),
                ('information_sign_conformity', models.BooleanField(verbose_name='Наличие информационной надписи, но не соответствующей требованиям')),
                ('photo', models.CharField(max_length=200, verbose_name='Фото')),
                ('url', models.CharField(max_length=200, verbose_name='URL адрес')),
                ('description', models.TextField(verbose_name='Описание')),
                ('affiliation_U', models.BooleanField(verbose_name='Принадлежность к ЮНЭСКО')),
                ('esp_valuable_object', models.BooleanField(verbose_name='Особо ценный объект')),
                ('requisites_and_title', models.TextField(verbose_name=' Реквизиты и наименование акта органа государственной власти о постановке на государственную охрану объекта культурного наследия')),
                ('owner', models.CharField(max_length=200, verbose_name='Собственник')),
                ('management', models.CharField(max_length=200, verbose_name='Под чьим управлением')),
                ('owner_contacts', models.TextField(verbose_name='Контактные данные собственника ОКН')),
                ('has_security_obligation', models.CharField(choices=[('Yes', 'Да'), ('No', 'Нет'), ('In_work', 'На подготовке')], max_length=5, verbose_name='Наличие охранного обязательства ОКН')),
                ('has_passport_OKN', models.CharField(choices=[('Yes', 'Да'), ('No', 'Нет'), ('In_work', 'На подготовке')], max_length=5, verbose_name='Наличие паспорта ОКН')),
                ('actual_address', models.TextField(verbose_name='Актуальный адрес')),
                ('has_docs_boundaries', models.BooleanField(verbose_name='Наличие документов о границах территории ОКН')),
                ('req_of_approval', models.TextField(verbose_name='Реквизиты об утверждении границ территории')),
                ('has_docs_of_aprroval', models.BooleanField(verbose_name='Наличие документов об утвержденых зонах охраны')),
                ('document_on_approved_security', models.TextField(verbose_name='Документ об утвержденых зонах охраны')),
                ('has_rights', models.BooleanField(verbose_name='Наличие зарегистрированных прав/обременений')),
                ('date', models.DateField(verbose_name='Дата')),
            ],
        ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Общая видовая принадлежность')),
            ],
        ),
        migrations.AddField(
            model_name='objectinfo',
            name='gen_species_appearance',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.Species', verbose_name='Общая видовая принадлежность'),
        ),
        migrations.AddField(
            model_name='objectinfo',
            name='locality',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.Locality', verbose_name='Населенный пункт'),
        ),
        migrations.AddField(
            model_name='objectinfo',
            name='municipality',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.Municipality', verbose_name='Муниципальное образование'),
        ),
    ]
